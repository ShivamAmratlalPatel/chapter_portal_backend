"""
added visits tables

Revision ID: d78868de1148
Revises: da31c96d345d
Created Date: 2024-06-03 20:43:30.110939+01:00

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "d78868de1148"
down_revision = "da31c96d345d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema and/or data, creating a new revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "visit_categories",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text(
                "timezone('Europe/London', timezone('Europe/London', CURRENT_TIMESTAMP))",
            ),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("last_modified_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_visit_categories_id"),
        "visit_categories",
        ["id"],
        unique=False,
    )
    op.create_table(
        "visits",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text(
                "timezone('Europe/London', timezone('Europe/London', CURRENT_TIMESTAMP))",
            ),
            nullable=False,
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("last_modified_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("visit_date", sa.Date(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("visit_category_id", sa.UUID(), nullable=True),
        sa.Column("comments", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["visit_category_id"],
            ["visit_categories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_visits_id"), "visits", ["id"], unique=False)
    op.create_table(
        "chapter_visit_association",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("visit_id", sa.UUID(), nullable=False),
        sa.Column("chapter_id", sa.UUID(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["chapter_id"], ["chapters.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["visit_id"], ["visits.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chapter_visit_association_id"),
        "chapter_visit_association",
        ["id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema and/or data back to the previous revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_chapter_visit_association_id"),
        table_name="chapter_visit_association",
    )
    op.drop_table("chapter_visit_association")
    op.drop_index(op.f("ix_visits_id"), table_name="visits")
    op.drop_table("visits")
    op.drop_index(op.f("ix_visit_categories_id"), table_name="visit_categories")
    op.drop_table("visit_categories")
    # ### end Alembic commands ###


def merge_upgrade_ops() -> None:
    """Merge upgrade operations from multiple branches."""


def merge_downgrade_ops() -> None:
    """Merge downgrade operations from multiple branches."""
